#--------------------------------------------------------------------------------------------------
# AWK
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# 01. Uso b√°sico
#     awk [condicion] '{printf"formato", argumentos}' nombreArchivo
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# 02. Imprimir los numeros que contengan el 1
seq 20 | awk '/1/ {print}' 
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# 03. Funciona con expresiones regulares
seq 20 | awk '/1$/ {print}'
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# 04. Imprimir unicamente las lineas que cumplan una condicion, en este caso unicamente entre la
#     tercera linea y la 6
seq 20 | awk '3<=NR && NR<=6 {print}'
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# 05. Hacer reemplazos con comando 'sub'
cat > out.1 <<EOF
FieldA, fieldD, gieldE, FieldG
   2, X, 2X, 2XG
   2, Y, 2Y, 2YG 
   3, Y, 3Y, 3YG
   3, X, 3X, 3XG
   4, Z, 4Z, 3XG
EOF
#     Reemplazar las 'X' mayusculas por 'x' minusculas
#     Al igual que 'sed' se puede hacer de manera local o de manera global
awk '{ sub(/X/,"x"); print}' out.1
awk '{gsub(/X/,"x"); print}' out.1
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# 06. Se pueden concatenar varios comandos en una sola linea con ';' como separador
awk '{gsub(/X/,"#"); gsub(/Y/,"?"); print}' out.1
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
# 07. Separar strings con 'split' y convertilos en un vector, su uso basico es:
#     split($0, nombre_arreglo, "separador")
cat > out.1 <<EOF
Maria-Patricia-Hernandez-Castro
Jose-Francisco-Montes-Lopez
EOF
#     Extraer el segundo nombre
awk '{split($0,vector_nombres,"-"); print vector_nombres[2]}' out.1
#--------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------
rm out.*
#--------------------------------------------------------------------------------------------------


